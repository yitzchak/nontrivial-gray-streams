* nontrivial-gray-streams
:PROPERTIES:
:CUSTOM_ID: nontrivial-gray-streams
:END:
nontrivial-gray-streams is a compability system for [[file:PROPOSAL.txt][Gray streams]] which
is an extension to Common Lisp that makes it possible to implement
Common Lisp streams using generic functions. The original proposal was
not accepted into the CL specification, but all modern CL
implmentations include support for this protocol because of its
usefulness.

nontrivial-gray-streams performs a simalar function as
[[https://github.com/trivial-gray-streams/trivial-gray-streams][trivial-gray-streams]] albeit with some different philosophies.

Firstly, nontrivial-gray-streams exposes and documents the most common
extensions to the Gray stream protocol. In exposing each extension it
adds feature words for conditional compilation that indicate the level
and type of support for that extension.

Secondly, unlike [[https://github.com/trivial-gray-streams/trivial-gray-streams][trivial-gray-streams]], it does not introduce its own
subclasses of the fundamental stream classes. Instead it exports the
CL implementation's fundamental stream classes directly.
[[https://github.com/trivial-gray-streams/trivial-gray-streams][trivial-gray-streams]] subclasses these classes so that it can define
its own version of the [[#SEQUENCE-EXTENSIONS][Sequence Extensions]] and the [[#FILE-POSITION-EXTENSIONS][File Position
Extensions]]. There is some variation in the signatures of the generic
functions of those extensions in the various CL implmentations, which
[[https://github.com/trivial-gray-streams/trivial-gray-streams][trivial-gray-streams]] tries to work around via this
mechanism. nontrivial-gray-streams exports these extensions exactly as
they appear and adds feature keywords as needed to distinguish the
differences.

Lastly, nontrivial-gray-streams includes a test suite that attempts to
address not just the core functionality of the Gray stream protocol,
but also the details of the various extensions.

** Systems and Packages
:PROPERTIES:
:CUSTOM_ID: systems-and-packages
:END:
The core functionality of nontrivial-gray-streams is in the
nontrivial-gray-streams ASDF system, which contains the
nontrivial-gray-streams package. This package also has the nickname
"ngray" for brevity.

The exported classes are functions are documented below along with
some notes regarding implementation or interface issues.

** Classes
:PROPERTIES:
:CUSTOM_ID: classes
:END:
The following classes are to be used as super classes of user-defined
stream classes. They are not intended to be directly instantiated;
they just provide places to hang default methods.

*** FUNDAMENTAL-STREAM
:PROPERTIES:
:CUSTOM_ID: fundamental-stream
:END:
/Class/

This class is a subclass of STREAM and of STANDARD-OBJECT.  [[#STREAMP][STREAMP]]
will return true for an instance of any class that includes this. (It
may return true for some other things also.)

*** FUNDAMENTAL-INPUT-STREAM
:PROPERTIES:
:CUSTOM_ID: fundamental-input-stream
:END:
/Class/

A subclass of [[#FUNDAMENTAL-STREAM][FUNDAMENTAL-STREAM]]. Its inclusion causes INPUT-STREAM-P
to return true.

*** FUNDAMENTAL-OUTPUT-STREAM
:PROPERTIES:
:CUSTOM_ID: fundamental-output-stream
:END:
/Class/

A subclass of [[#FUNDAMENTAL-STREAM][FUNDAMENTAL-STREAM]]. Its inclusion causes [[#OUTPUT-STREAM-P][OUTPUT-STREAM-P]]
to return true.  Bi-direction streams may be formed by including both
[[#FUNDAMENTAL-OUTPUT-STREAM][FUNDAMENTAL-OUTPUT-STREAM]] and [[#FUNDAMENTAL-INPUT-STREAM][FUNDAMENTAL-INPUT-STREAM]].

*** FUNDAMENTAL-CHARACTER-STREAM
:PROPERTIES:
:CUSTOM_ID: fundamental-character-stream
:END:
/Class/

A subclass of [[#FUNDAMENTAL-STREAM][FUNDAMENTAL-STREAM]]. It provides a method for
[[#STREAM-ELEMENT-TYPE][STREAM-ELEMENT-TYPE]] which returns CHARACTER.

*** FUNDAMENTAL-BINARY-STREAM
:PROPERTIES:
:CUSTOM_ID: fundamental-binary-stream
:END:
/Class/

A subclass of [[#FUNDAMENTAL-STREAM][FUNDAMENTAL-STREAM]]. Any instantiable class that includes
this needs to define a method for [[#STREAM-ELEMENT-TYPE][STREAM-ELEMENT-TYPE]].

*** FUNDAMENTAL-CHARACTER-INPUT-STREAM
:PROPERTIES:
:CUSTOM_ID: fundamental-character-input-stream
:END:
/Class/

Includes [[#FUNDAMENTAL-INPUT-STREAM][FUNDAMENTAL-INPUT-STREAM]] and [[#FUNDAMENTAL-CHARACTER-STREAM][FUNDAMENTAL-CHARACTER-STREAM]]. It
provides default methods for several generic functions used for
character input.

*** FUNDAMENTAL-CHARACTER-OUTPUT-STREAM
:PROPERTIES:
:CUSTOM_ID: fundamental-character-output-stream
:END:
/Class/

Includes [[#FUNDAMENTAL-OUTPUT-STREAM][FUNDAMENTAL-OUTPUT-STREAM]] and
[[#FUNDAMENTAL-CHARACTER-STREAM][FUNDAMENTAL-CHARACTER-STREAM]]. It provides default methods for several
generic functions used for character output.

*** FUNDAMENTAL-BINARY-INPUT-STREAM
:PROPERTIES:
:CUSTOM_ID: fundamental-binary-input-stream
:END:
/Class/

Includes [[#FUNDAMENTAL-INPUT-STREAM][FUNDAMENTAL-INPUT-STREAM]] and [[#FUNDAMENTAL-BINARY-STREAM][FUNDAMENTAL-BINARY-STREAM]].

*** FUNDAMENTAL-BINARY-OUTPUT-STREAM
:PROPERTIES:
:CUSTOM_ID: fundamental-binary-output-stream
:END:
/Class/

Includes [[#FUNDAMENTAL-OUTPUT-STREAM][FUNDAMENTAL-OUTPUT-STREAM]] and [[#FUNDAMENTAL-BINARY-STREAM][FUNDAMENTAL-BINARY-STREAM]].

** Character Input
:PROPERTIES:
:CUSTOM_ID: character-input
:END:
A character input stream can be created by defining a class that
includes [[#FUNDAMENTAL-CHARACTER-INPUT-STREAM][FUNDAMENTAL-CHARACTER-INPUT-STREAM]] and defining methods for
the generic functions below.

*** STREAM-READ-CHAR
:PROPERTIES:
:CUSTOM_ID: stream-read-char
:END:
/Generic Function/

#+begin_src common-lisp
(stream-read-char stream) ; → (or character (eql :eof))
#+end_src

This reads one character from the stream. It returns either a
character object, or the symbol :EOF if the stream is at
end-of-file. Every subclass of [[#FUNDAMENTAL-CHARACTER-INPUT-STREAM][FUNDAMENTAL-CHARACTER-INPUT-STREAM]] must
define a method for this function.

Note that for all of these generic functions, the stream argument must
be a stream object, not T or NIL.

*** STREAM-UNREAD-CHAR
:PROPERTIES:
:CUSTOM_ID: stream-unread-char
:END:
/Generic Function/

#+begin_src common-lisp
(stream-unread-char stream character) ; → null
#+end_src

Un-does the last call to [[#STREAM-READ-CHAR][STREAM-READ-CHAR]], as in
[[https://novaspec.org/cl/f_unread-char][CL:UNREAD-CHAR]]. Returns NIL.  Every subclass of
[[#FUNDAMENTAL-CHARACTER-INPUT-STREAM][FUNDAMENTAL-CHARACTER-INPUT-STREAM]] must define a method for this
function.

*** STREAM-READ-CHAR-NO-HANG
:PROPERTIES:
:CUSTOM_ID: stream-read-char-no-hang
:END:
/Generic Function/

#+begin_src common-lisp
(stream-read-char-no-hang stream) ; → (or character nil (eql :eof))
#+end_src

This is used to implement [[https://novaspec.org/cl/f_read-char-no-hang][CL:READ-CHAR-NO-HANG]].  It returns either a
character, or NIL if no input is currently available, or :EOF if
end-of-file is reached. The default method provided by
[[#FUNDAMENTAL-CHARACTER-INPUT-STREAM][FUNDAMENTAL-CHARACTER-INPUT-STREAM]] simply calls [[#STREAM-READ-CHAR][STREAM-READ-CHAR]]; this
is sufficient for file streams, but interactive streams should define
their own method.

*** STREAM-PEEK-CHAR
:PROPERTIES:
:CUSTOM_ID: stream-peek-char
:END:
/Generic Function/

#+begin_src common-lisp
(stream-peek-char stream) ; → (or character (eql :eof))
#+end_src

Used to implement [[https://novaspec.org/cl/f_peek-char][CL:PEEK-CHAR]]; this corresponds to peek-type of
NIL. It returns either a character or :EOF. The default method calls
[[#STREAM-READ-CHAR][STREAM-READ-CHAR]] and [[#STREAM-UNREAD-CHAR][STREAM-UNREAD-CHAR]].

*** STREAM-LISTEN
:PROPERTIES:
:CUSTOM_ID: stream-listen
:END:
/Generic Function/

#+begin_src common-lisp
(stream-listen stream) ; → boolean
#+end_src

Used by [[https://novaspec.org/cl/f_listen][CL:LISTEN]]. Returns true or false. The default method uses
[[#STREAM-READ-CHAR-NO-HANG][STREAM-READ-CHAR-NO-HANG]] and [[#STREAM-UNREAD-CHAR][STREAM-UNREAD-CHAR]]. Most streams should
define their own method since it will usually be trivial and will
always be more efficient than the default method.

#+begin_quote
The default implementation described by the Gray stream protocol is
flawed since binary streams do not support reading or unreading
characters. This implementation is probably only appropriate for
[[#FUNDAMENTAL-CHARACTER-INPUT-STREAM][FUNDAMENTAL-CHARACTER-INPUT-STREAM]].  This means that
[[#FUNDAMENTAL-BINARY-INPUT-STREAM][FUNDAMENTAL-BINARY-INPUT-STREAM]] subclasses would need to specialize
this generic function at a minimum.

A default implementation that followed the pattern described by the Gray
stream protocol would require the addition of STREAM-READ-BYTE-NO-HANG
and STREAM-UNREAD-BYTE generic functions. These functions do not have a
parallel in the ANSI specification. Also, the description of
[[https://novaspec.org/cl/f_listen][CL:LISTEN]] seems to assume that the
stream is an interactive character input stream versus other types of
streams that listening would be used on, i.e. networked binary streams.

— Tarn W. Burton
#+end_quote

*** STREAM-READ-LINE
:PROPERTIES:
:CUSTOM_ID: stream-read-line
:END:
/Generic Function/

#+begin_src common-lisp
(stream-read-line stream) ; → string, boolean
#+end_src

Used by [[https://novaspec.org/cl/f_read-line][CL:READ-LINE]]. A string is returned as the first value. The
second value is true if the string was terminated by end-of-file
instead of the end of a line. The default method uses repeated calls
to [[#STREAM-READ-CHAR][STREAM-READ-CHAR]].

#+begin_quote
The proposal does not explicitly state what should be returned if
end-of-file is encountered when no characters, newline or otherwise,
have been read. Presumably it is =(values "" t)= since the example
method provided in the proposal returns these values in this
situation.

— Tarn W. Burton
#+end_quote

*** STREAM-CLEAR-INPUT
:PROPERTIES:
:CUSTOM_ID: stream-clear-input
:END:
/Generic Function/

#+begin_src common-lisp
(stream-clear-input stream) ; → null 
#+end_src

Implements [[https://novaspec.org/cl/f_clear-input][CL:CLEAR-INPUT]] for the stream, returning NIL. The default
method does nothing.

** Character Output
:PROPERTIES:
:CUSTOM_ID: character-output
:END:
A character output stream can be created by defining a class that
includes
[[#FUNDAMENTAL-CHARACTER-OUTPUT-STREAM][FUNDAMENTAL-CHARACTER-OUTPUT-STREAM]]
and defining methods for the generic functions below.

*** STREAM-WRITE-CHAR
:PROPERTIES:
:CUSTOM_ID: stream-write-char
:END:
/Generic Function/

#+begin_src common-lisp
(stream-write-char stream character) ; → character
#+end_src

Writes character to the stream and returns the character. Every subclass
of
[[#FUNDAMENTAL-CHARACTER-OUTPUT-STREAM][FUNDAMENTAL-CHARACTER-OUTPUT-STREAM]]
must have a method defined for this function.

*** STREAM-LINE-COLUMN
:PROPERTIES:
:CUSTOM_ID: stream-line-column
:END:
/Generic Function/

#+begin_src common-lisp
(stream-line-column stream) ; → (or real null)
#+end_src

This function returns the column number where the next character will
be written, or NIL if that is not meaningful for this stream. The
first column on a line is numbered 0. This function is used in the
implementation of [[https://novaspec.org/cl/f_write][CL:PPRINT]] and the [[https://novaspec.org/cl/22_3_Formatted_Output#sec_22_3_6_1][CL:FORMAT ~T]] directive. For every
character output stream class that is defined, a method must be
defined for this function, although it is permissible for it to always
return NIL.

#+begin_quote
The orignal proposal does not specify the numerical type of columns in
this function or in [[#STREAM-ADVANCE-TO-COLUMN][STREAM-ADVANCE-TO-COLUMN]]. The ANSI Common Lisp
specification exclicitly allows real numbers for the purpose of
typesetting variable-width characters. Many implementations seem to
assume that the return from STREAM-LINE-COLUMN or the column number
passed to [[#STREAM-ADVANCE-TO-COLUMN][STREAM-ADVANCE-TO-COLUMN]] is an integer, but this does not
comply with the specification.

— Tarn W. Burton
#+end_quote

#+begin_quote
This generic function does not have a very good name. There is no
allowance in the Gray stream proposal for the tracking of column or
line number for input streams even though this is implemented by all
Common Lisp implementations for the purpose of compile source
information. If there was an additional generic function
STREAM-LINE-NUMBER one would do this by using the existing
STREAM-LINE-COLUMN for input streams.  Although that would work for
unidirectional streams it is not clear how it would apply to
bidirectional streams. Specifically, in the case of TWO-WAY-STREAM,
for which stream should STREAM-LINE-COLUMN be forwarded to? In order
work seamlessly for bidirectional streams, perhapsi t would be better
if this generic function had been named STREAM-OUTPUT-COLUMN.  Then
the corresponding STREAM-OUTPUT-LINE, STREAM-INPUT-COLUMN, and
STREAM-INPUT-LINE could be added and fit the naming pattern naturally.

— Tarn W. Burton
#+end_quote

*** STREAM-START-LINE-P
:PROPERTIES:
:CUSTOM_ID: stream-start-line-p
:END:
/Generic Function/

#+begin_src common-lisp
(stream-start-line-p stream) ; → boolean
#+end_src

This is a predicate which returns T if the stream is positioned at the
beginning of a line, else NIL. It is permissible to always return NIL.
This is used in the implementation of [[https://novaspec.org/cl/f_terpri][CL:FRESH-LINE]]. Note that while a
value of 0 from [[#STREAM-LINE-COLUMN][STREAM-LINE-COLUMN]] also indicates the beginning of a
line, there are cases where [[#STREAM-START-LINE-P][STREAM-START-LINE-P]] can be meaningfully
implemented although [[#STREAM-LINE-COLUMN][STREAM-LINE-COLUMN]] can't be. For example, for a
window using variable-width characters, the column number isn't very
meaningful, but the beginning of the line does have a clear
meaning. The default method for [[#STREAM-START-LINE-P][STREAM-START-LINE-P]] on class
[[#FUNDAMENTAL-CHARACTER-OUTPUT-STREAM][FUNDAMENTAL-CHARACTER-OUTPUT-STREAM]] uses [[#STREAM-LINE-COLUMN][STREAM-LINE-COLUMN]], so if
that is defined to return NIL, then a method should be provided for
either [[#STREAM-START-LINE-P][STREAM-START-LINE-P]] or [[#STREAM-FRESH-LINE][STREAM-FRESH-LINE]].

#+begin_quote
This generic function is superfluous. The statement that "for a window
using variable-width characters, the column number isn't very
meaningful" is just not true. Real valued column numbers are
explicitly permitted in the specification of the pretty printer and
are very useful in the typesetting of variable-width characters,
especially when STREAM-ADVANCE-TO-COLUMN can move to real valued
columns using a mechanism other then the insertion of spaces. Most
implementations of the pretty printer assemble the output text into a
string buffer and interpret the index of the characters to be related
to the column number. In other words they do not allow for the
possibility of real valued columns that are not non-negative
integers. But it is possible to create an implementation of the pretty
printer that can typeset using variable-width characters,
i.e. [[https://github.com/yitzchak/Inravina][Inravina]]. Furthermore, [[#STREAM-LINE-COLUMN][STREAM-LINE-COLUMN]] has already specified
that the first column at the start of a line is to be numbered 0 which
implies that STREAM-START-LINE-P will always just be equivalent to
=(eql column 0)=.

— Tarn W. Burton
#+end_quote

*** STREAM-WRITE-STRING
:PROPERTIES:
:CUSTOM_ID: stream-write-string
:END:
/Generic Function/

#+begin_src common-lisp
(stream-write-string stream string &optional start end) ; → string
#+end_src

This is used by [[https://novaspec.org/cl/f_write-string][CL:WRITE-STRING]]. It writes the string to the stream,
optionally delimited by start and end, which default to 0 and NIL. The
string argument is returned. The default method provided by
[[#FUNDAMENTAL-CHARACTER-OUTPUT-STREAM][FUNDAMENTAL-CHARACTER-OUTPUT-STREAM]] uses repeated calls to
[[#STREAM-WRITE-CHAR][STREAM-WRITE-CHAR]].

*** STREAM-TERPRI
:PROPERTIES:
:CUSTOM_ID: stream-terpri
:END:
/Generic Function/

#+begin_src common-lisp
(stream-terpri stream) ; → null
#+end_src

Writes an end of line, as for [[https://novaspec.org/cl/f_terpri][CL:TERPRI]]. Returns NIL. The default
method does =(STREAM-WRITE-CHAR stream #\NEWLINE)=.

#+begin_quote
The default method described in the proposal should probably be only
for fundamental-character-output-stream since non-bivalent binary
streams do not have a concept of columns. In this case any signaled
error would be appropriate including NO-APPLICABLE-METHOD.

— Tarn W. Burton
#+end_quote

*** STREAM-FRESH-LINE
:PROPERTIES:
:CUSTOM_ID: stream-fresh-line
:END:
/Generic Function/

#+begin_src common-lisp
(stream-fresh-line stream) ; → null
#+end_src

Used by [[https://novaspec.org/cl/f_terpri][CL:FRESH-LINE]]. The default method uses [[#STREAM-START-LINE-P][STREAM-START-LINE-P]] and
[[#STREAM-TERPRI][STREAM-TERPRI]].

#+begin_quote
The default method described in the proposal should probably be only
for fundamental-character-output-stream since non-bivalent binary
streams do not have a concept of columns. In this case any signaled
error would be appropriate including NO-APPLICABLE-METHOD.

Additionally. the description of the default method and the example
method given in the proposal do not follow the specification as per
[[https://novaspec.org/cl/f_terpri][CL:FRESH-LINE]]. There it states that "If for some reason this cannot be
determined, then a newline is output anyway." Does this mean that a
newline is output if =(or (stream-start-line-p stream) (null
(stream-line-column stream)))= is non-NIL?

— Tarn W. Burton
#+end_quote

*** STREAM-FINISH-OUTPUT
:PROPERTIES:
:CUSTOM_ID: stream-finish-output
:END:
/Generic Function/

#+begin_src common-lisp
(stream-finish-output stream) ; → null
#+end_src

Implements [[https://novaspec.org/cl/f_finish-output][CL:FINISH-OUTPUT]]. The default method does nothing.

*** STREAM-FORCE-OUTPUT
:PROPERTIES:
:CUSTOM_ID: stream-force-output
:END:
/Generic Function/

#+begin_src common-lisp
(stream-force-output stream) ; → null
#+end_src

Implements [[https://novaspec.org/cl/f_finish-output][CL:FORCE-OUTPUT]]. The default method does nothing.

*** STREAM-CLEAR-OUTPUT
:PROPERTIES:
:CUSTOM_ID: stream-clear-output
:END:
/Generic Function/

#+begin_src common-lisp
(stream-clear-output stream) ; → null
#+end_src

Implements [[https://novaspec.org/cl/f_finish-ouput][CL:CLEAR-OUTPUT]]. The default method does nothing.

*** STREAM-ADVANCE-TO-COLUMN
:PROPERTIES:
:CUSTOM_ID: stream-advance-to-column
:END:
/Generic Function/

#+begin_src common-lisp
(stream-advance-to-column stream column) ; → boolean
#+end_src

Writes enough blank space so that the next character will be written
at the specified column. Returns true if the operation is successful,
or NIL if it is not supported for this stream. This is intended for
use by by PPRINT and FORMAT ~T. The default method uses
[[#STREAM-LINE-COLUMN][STREAM-LINE-COLUMN]] and repeated calls to [[#STREAM-WRITE-CHAR][STREAM-WRITE-CHAR]] with a
#\SPACE character; it returns NIL if [[#STREAM-LINE-COLUMN][STREAM-LINE-COLUMN]] returns NIL.

#+begin_quote
The default method described in the proposal should probably be only
for fundamental-character-output-stream since non-bivalent binary
streams do not have a concept of columns. In this case any signaled
error would be appropriate including NO-APPLICABLE-METHOD.

— Tarn W. Burton
#+end_quote

** Other Functions
:PROPERTIES:
:CUSTOM_ID: other-functions
:END:
*** CLOSE
:PROPERTIES:
:CUSTOM_ID: close
:END:
/Generic Function/

#+begin_src common-lisp
(close stream &key abort) ; → t
#+end_src

The existing function CLOSE is redefined to be a generic function, but
otherwise behaves the same. The default method provided by class
[[#FUNDAMENTAL-STREAM][FUNDAMENTAL-STREAM]] sets a flag for [[#OPEN-STREAM-P][OPEN-STREAM-P]]. The value returned
by CLOSE will be as specified by the issue CLOSED-STREAM-OPERATIONS.

*** OPEN-STREAM-P
:PROPERTIES:
:CUSTOM_ID: open-stream-p
:END:
/Generic Function/

#+begin_src common-lisp
(open-stream-p stream) ; → boolean
#+end_src

This function [from proposal STREAM-ACCESS] is made generic. A default
method is provided by class [[#FUNDAMENTAL-STREAM][FUNDAMENTAL-STREAM]] which returns true if
CLOSE has not been called on the stream.

*** STREAM-ELEMENT-TYPE
:PROPERTIES:
:CUSTOM_ID: stream-element-type
:END:
/Generic Function/

#+begin_src common-lisp
(stream-element-type stream) ; → typespec
#+end_src

This existing function is made generic, but otherwise behaves the
same.  Class [[#FUNDAMENTAL-CHARACTER-STREAM][FUNDAMENTAL-CHARACTER-STREAM]] provides a default method
which returns CHARACTER.

*** PATHNAME
:PROPERTIES:
:CUSTOM_ID: pathname
:END:
[[https://novaspec.org/cl/f_pathname][CL:PATHNAME]] is also permitted to be implemented as generic
functions. There is no default method since it is not valid for all
streams. If [[https://novaspec.org/cl/f_pathname][CL:PATHNAME]] is made generic then the feature
=:gray-streams-pathname= will be present.

*** TRUENAME
:PROPERTIES:
:CUSTOM_ID: truename
:END:
[[https://novaspec.org/cl/f_truename][CL:TRUENAME]] is also permitted to be implemented as generic
functions. There is no default method since it is not valid for all
streams. If [[https://novaspec.org/cl/f_truename][CL:TRUENAME]] is made generic then the feature
=:gray-streams-truename= will be present.

** Optional Predicates
:PROPERTIES:
:CUSTOM_ID: optional-predicates
:END:
These three existing predicates may optionally be implemented as
generic functions for implementations that want to permit users to
define streams that are not STANDARD-OBJECTs. Normally, the default
methods provided by classes [[#FUNDAMENTAL-INPUT-STREAM][FUNDAMENTAL-INPUT-STREAM]] and
[[#FUNDAMENTAL-OUTPUT-STREAM][FUNDAMENTAL-OUTPUT-STREAM]] are sufficient. Note that, for example,
=(INPUT-STREAM-P x)= is not equivalent to =(TYPEP x
'FUNDAMENTAL-INPUT-STREAM)= because implementations may have
additional ways of defining their own streams even if they don't make
that visible by making these predicates generic.

#+begin_quote
If the implementation does not support a generic STREAMP then classes
that implement the Gray stream protocol must subclass [[https://novaspec.org/cl/t_stream][STREAM]]. In
practice this means they will probably actually need to subclass
[[#FUNDAMENTAL-STREAM][FUNDAMENTAL-STREAM]] since [[https://novaspec.org/cl/t_stream][STREAM]] may be a [[https://novaspec.org/cl/t_built-in-class][BUILT-IN-CLASS]]. Even in the
cases that [[https://novaspec.org/cl/t_stream][STREAM]] is not a [[https://novaspec.org/cl/t_built-in-class][BUILT-IN-CLASS]] it may not be [[https://novaspec.org/cl/t_standard-class][STANDARD-CLASS]]
since streams are required very early in the bootstrapping of some
Common Lisp implementations.

The absence of support for generic versions of INPUT-STREAM-P and
OUTPUT-STREAM-P implies some of the same issues for subclassing of
[[#FUNDAMENTAL-INPUT-STREAM][FUNDAMENTAL-INPUT-STREAM]] and [[#FUNDAMENTAL-OUTPUT-STREAM][FUNDAMENTAL-OUTPUT-STREAM]] with the
additional note that no implementation provides a generic STREAMP but
does not provide generic versions of INPUT-STREAM-P and
OUTPUT-STREAM-P.  This means that either an implementation supports
all three generic predicates, it supports INPUT-STREAM-P and
OUTPUT-STREAM-P but not STREAMP, or it does not support any of these
three generic predicates.  Therefore, on implementations that do not
support these three generic predicates subclassing
[[#FUNDAMENTAL-INPUT-STREAM][FUNDAMENTAL-INPUT-STREAM]] or [[#FUNDAMENTAL-OUTPUT-STREAM][FUNDAMENTAL-OUTPUT-STREAM]] is required.

— Tarn W. Burton
#+end_quote

*** STREAMP
:PROPERTIES:
:CUSTOM_ID: streamp
:END:
/Generic Function/

#+begin_src common-lisp
(streamp stream) ; → boolean
#+end_src

Indicated by the presence of feature =:gray-streams-streamp=.

*** INPUT-STREAM-P
:PROPERTIES:
:CUSTOM_ID: input-stream-p
:END:
/Generic Function/

#+begin_src common-lisp
(input-stream-p stream) ; → boolean
#+end_src

Indicated by the presence of feature =:gray-streams-directionp=.

*** OUTPUT-STREAM-P
:PROPERTIES:
:CUSTOM_ID: output-stream-p
:END:
/Generic Function/

#+begin_src common-lisp
(output-stream-p stream) ; → boolean
#+end_src

Indicated by the presence of feature =:gray-streams-directionp=.

** Binary Streams
:PROPERTIES:
:CUSTOM_ID: binary-streams
:END:
Binary streams can be created by defining a class that includes either
[[#FUNDAMENTAL-BINARY-INPUT-STREAM][FUNDAMENTAL-BINARY-INPUT-STREAM]] or [[#FUNDAMENTAL-BINARY-OUTPUT-STREAM][FUNDAMENTAL-BINARY-OUTPUT-STREAM]]
(or both) and defining a method for [[#STREAM-ELEMENT-TYPE][STREAM-ELEMENT-TYPE]] and for one or
both of the following generic functions.

*** STREAM-READ-BYTE
:PROPERTIES:
:CUSTOM_ID: stream-read-byte
:END:
/Generic Function/

#+begin_src common-lisp
(stream-read-byte stream) ; → (or integer (eql :eof))
#+end_src

Used by [[https://novaspec.org/cl/f_read-byte][CL:READ-BYTE]]; returns either an integer, or the symbol :EOF if
the stream is at end-of-file.

*** STREAM-WRITE-BYTE
:PROPERTIES:
:CUSTOM_ID: stream-write-byte
:END:
/Generic Function/

#+begin_src common-lisp
(stream-write-byte stream integer) ; → integer
#+end_src

Implements [[https://novaspec.org/cl/f_write-byte][CL:WRITE-BYTE]]; writes the integer to the stream and returns
the integer as the result.

** Implementation Support of Extensions and Optional Interfaces
:PROPERTIES:
:CUSTOM_ID: implementation-support-of-extensions-and-optional-interfaces
:END:
| Interface/Extension      | [[https://armedbear.common-lisp.dev/][ABCL]] | [[https://franz.com/products/allegro-common-lisp/][Allegro]] | [[https://github.com/Clozure/ccl][CCL]] | [[https://clasp-developers.github.io/][Clasp]] | [[https://gitlab.com/gnu-clisp/clisp][CLISP]] | [[https://gitlab.common-lisp.net/cmucl/cmucl][CMUCL]] | [[https://ecl.common-lisp.dev/][ECL]] | [[https://www.lispworks.com/products/lispworks.html][LispWorks]] | [[https://github.com/froggey/Mezzano][Mezzano]] | [[https://mkcl.common-lisp.dev/][MKCL]] | [[http://sbcl.org/][SBCL]] |
|--------------------------+------+---------+-----+-------+-------+-------+-----+-----------+---------+------+------|
| [[#STREAMP][STREAMP]]                  | ✓    |         | ✓¹  | ✓     |       |       | ✓   | ✓         | ✓       | ✓    |      |
| [[#INPUT-STREAM-P][INPUT-STREAM-P]]           | ✓    | ✓       | ✓   | ✓     |       | ✓     | ✓   | ✓         | ✓       | ✓    | ✓    |
| [[#OUTPUT-STREAM-P][OUTPUT-STREAM-P]]          | ✓    | ✓       | ✓   | ✓     |       | ✓     | ✓   | ✓         | ✓       | ✓    | ✓    |
| [[#PATHNAME][PATHNAME]]                 | ✓    |         | ✓   | ✓     |       | ✓     |     |           | ✓       |      |      |
| [[#TRUENAME][TRUENAME]]                 | ✓    |         |     | ✓     |       | ✓     |     |           | ✓       |      |      |
| [[#SETF-STREAM-ELEMENT-TYPE][SETF STREAM-ELEMENT-TYPE]] | ✓    |         |     | ✓     | ✓     | ✓     |     |           |         |      |      |
| [[#SEQUENCE-EXTENSIONS][Sequence]]                 | ✓    | ✓       | ✓   | ✓     | ✓     | ✓     | ✓   | ✓         | ✓       | ✓    | ✓    |
| [[#FILE-POSITION-EXTENSIONS][File Position]]            | ✓    | ✓       | ✓   | ✓     | ✓     | ✓     | ✓   | ✓         | ✓       | ✓    | ✓    |
| [[#FILE-LENGTH-EXTENSIONS][File Length]]              | ✓    |         | ✓¹  | ✓     |       | ✓     | ✓   |           | ✓       |      |      |
| [[#FILE-STRING-LENGTH-EXTENSIONS][File String Length]]       |      |         |     | ✓     |       |       |     |           | ✓       |      |      |
| [[#EXTERNAL-FORMAT-EXTENSIONS][External Format]]          |      |         | ✓   | ✓     |       |       |     |           | ✓       |      |      |
| [[#INTERACTIVE-STREAM-P][INTERACTIVE-STREAM-P]]     | ✓    |         | ✓   | ✓     |       | ✓     | ✓   |           | ✓       | ✓    | ✓    |
| [[#LINE-LENGTH-EXTENSIONS][Line Length]]              | ✓    | ✓       | ✓   | ✓     |       | ✓     | ✓   | ✓         | ✓       |      | ✓    |

1. The generic versions of STREAMP and FILE-LENGTH are in conflict
   with each other in CCL. The ANSI specification requires FILE-LENGTH
   to signal an TYPE-ERROR when the stream is not a FILE-STREAM. This
   requires subclassing FILE-STREAM in any class which wishes to
   implement FILE-LENGTH, but subclassing FILE-STREAM would make
   specializing STREAMP extraneous. This is probably only resolvable
   by the addition of a generic FILE-STREAM-P, which has no
   corresponding function in the ANSI specification.

** Bivalent Extensions
:PROPERTIES:
:CUSTOM_ID: bivalent-extensions
:END:
*** SETF STREAM-ELEMENT-TYPE
:PROPERTIES:
:CUSTOM_ID: setf-stream-element-type
:END:
The Gray stream protocol makes [[#STREAM-ELEMENT-TYPE][STREAM-ELEMENT-TYPE]] a generic function
but does not provide for bivalent streams which can change the element
type at any time. In order support bivalent streams one needs a SETF
for [[https://novaspec.org/cl/f_stream-element-type][CL:STREAM-ELEMENT-TYPE]].  The existance of this extension is
indicated by the feature =:gray-streams-element-type/setf=.

#+begin_src common-lisp
((setf stream-element-type) new-value stream) ; → new-value
#+end_src

** Sequence Extensions
:PROPERTIES:
:CUSTOM_ID: sequence-extensions
:END:
Generic functions that provide the implementation for [[https://novaspec.org/cl/f_read-sequence][CL:READ-SEQUENCE]]
and [[https://novaspec.org/cl/f_write-sequence][CL:WRITE-SEQUENCE]].  Indicated by the presence of the feature
=:gray-streams-sequence=. This extension is not consistently defined
by the implementations that expose it. Some implementations have the
start and end arguments as required, some have them as optional, and
some have them as keyword arguments.  Given that that
[[#STREAM-WRITE-STRING][STREAM-WRITE-STRING]] has start and end as optional arguments this is
probably the choice that is more consistent with the Gray stream
protocol.

*** STREAM-READ-SEQUENCE
:PROPERTIES:
:CUSTOM_ID: stream-read-sequence
:END:
/Generic Function/

*** Variants
:PROPERTIES:
:CUSTOM_ID: variants
:END:
1. Variant with optional start and end arguments. Indicated by
   presence of feature =:gray-streams-sequence/optional=.

   #+begin_src common-lisp
   (stream-read-sequence stream sequence &optional start end) ; → integer
   #+end_src

2. Variant with all required arguments. Indicated by presence of
   feature =:gray-streams-sequence/required=.

   #+begin_src common-lisp
   (stream-read-sequence stream sequence start end) ; → integer
   #+end_src

3. Variant with keyword arguments and reversed sequence and stream
   arguments. Indicated by presence of feature
   =:gray-streams-sequence/key=.

   #+begin_src common-lisp
   (stream-read-sequence sequence stream &key start end) ; → integer
   #+end_src

*** STREAM-WRITE-SEQUENCE
:PROPERTIES:
:CUSTOM_ID: stream-write-sequence
:END:
/Generic Function/

*** Variants
:PROPERTIES:
:CUSTOM_ID: variants-1
:END:
1. Variant with optional start and end arguments. Indicated by
   presence of feature =:gray-streams-sequence/optional=.

   #+begin_src common-lisp
   (stream-write-sequence stream sequence &optional start end) ; → integer
   #+end_src

2. Variant with all required arguments. Indicated by presence of
   feature =:gray-streams-sequence/required=.

   #+begin_src common-lisp
   (stream-write-sequence stream sequence start end) ; → integer
   #+end_src

3. Variant with keyword arguments and reversed sequence and stream
   arguments. Indicated by presence of feature
   =:gray-streams-sequence/key=.

   #+begin_src common-lisp
   (stream-write-sequence sequence stream &key start end) ; → integer
   #+end_src

** File Position Extensions
:PROPERTIES:
:CUSTOM_ID: file-position-extensions
:END:
*** STREAM-FILE-POSITION
:PROPERTIES:
:CUSTOM_ID: stream-file-position
:END:
/Generic Function/

*** Variants
:PROPERTIES:
:CUSTOM_ID: variants-2
:END:
1. Variant with optional position argument. Indicated by presence of
   feature =:gray-streams-file-position/optional=.

   #+begin_src common-lisp
   (stream-file-position stream &optional position) ; → (or integer boolean)
   #+end_src

2. Variant with required position argument. Indicated by presence of
   feature =:gray-streams-file-position/required=.

   #+begin_src common-lisp
   (stream-file-position stream position) ; → (or integer boolean)
   #+end_src

3. Variant without position argument. Indicated by presence of feature
   =:gray-streams-file-position/get=.

   #+begin_src common-lisp
   (stream-file-position stream) ; → (or integer null)
   #+end_src

4. Variant with SETF function. Indicated by presence of feature
   =:gray-streams-file-position/setf=.

   #+begin_src common-lisp
   ((setf stream-file-position) position stream) ; → boolean
   #+end_src

Generic functions that allow implementing [[https://novaspec.org/cl/f_file-position][CL:FILE-POSITION]] for Gray
streams. Indicated by feature =:gray-streams-file-position=.

** File Length Extensions
:PROPERTIES:
:CUSTOM_ID: file-length-extensions
:END:
*** STREAM-FILE-LENGTH
:PROPERTIES:
:CUSTOM_ID: stream-file-length
:END:
/Generic Function/

*** Variants
:PROPERTIES:
:CUSTOM_ID: variants-3
:END:
1. Variant with optional length argument. Indicated by presence of
   feature =:gray-streams-file-length/optional=.

   #+begin_src common-lisp
   (stream-file-length stream &optional length) ; → (or integer boolean)
   #+end_src

2. Variant without length argument. Indicated by presence of feature
   =:gray-streams-file-length/get=.

   #+begin_src common-lisp
   (stream-file-length stream) ; → (or integer null)
   #+end_src

Allows implementing [[https://novaspec.org/cl/f_file-length][CL:FILE-LENGTH]] for Gray streams. Indicated by the
presence of feature =:gray-streams-file-length=. The default method
signals a =type-error= with an expected type of =file-stream= as
required by the ANSI specification.

** File String Length Extensions
:PROPERTIES:
:CUSTOM_ID: file-string-length-extensions
:END:
*** STREAM-FILE-STRING-LENGTH
:PROPERTIES:
:CUSTOM_ID: stream-file-string-length
:END:
/Generic Function/

#+begin_src common-lisp
(stream-file-string-length stream object) ; → (or integer null)
#+end_src

Allows implementing [[https://novaspec.org/cl/f_file-string-length][CL:FILE-STRING-LENGTH]] for Gray streams. Indicated
by the presence of feature =:gray-streams-file-string-length=. The
default for [[#FUNDAMENTAL-CHARACTER-OUTPUT-STREAM][FUNDAMENTAL-CHARACTER-OUTPUT-STREAM]] returns NIL.

** External Format Extensions
:PROPERTIES:
:CUSTOM_ID: external-format-extensions
:END:
*** STREAM-EXTERNAL-FORMAT
:PROPERTIES:
:CUSTOM_ID: stream-external-format
:END:
/Generic Function/

#+begin_src common-lisp
(stream-external-format stream) ; → format
#+end_src

Generic functions that allow implementing [[https://novaspec.org/cl/f_stream-external-format][CL:STREAM-EXTERNAL-FORMAT]]
for Gray streams. Indicated by feature
=:gray-streams-external-format=.

*** SETF STREAM-EXTERNAL-FORMAT
:PROPERTIES:
:CUSTOM_ID: setf-stream-external-format
:END:
#+begin_src common-lisp
((setf stream-external-format) format stream) ; → format
#+end_src

Generic functions that allow SETF on [[https://novaspec.org/cl/f_stream-external-format][CL:STREAM-EXTERNAL-FORMAT]] for
Gray streams. Indicated by feature
=:gray-streams-external-format/setf=.

** Interactive Stream Extensions
:PROPERTIES:
:CUSTOM_ID: interactive-stream-extensions
:END:
*** INTERACTIVE-STREAM-P
:PROPERTIES:
:CUSTOM_ID: interactive-stream-p
:END:
/Generic Function/

#+begin_src common-lisp
(interactive-stream-p stream) ; → boolean
#+end_src

Allows implementing [[https://novaspec.org/cl/f_interactive-stream-p][CL:INTERACTIVE-STREAM-P]] for Gray
streams. Indicated by the presence of feature
=:gray-streams-interactive=.

** Line Length Extensions
:PROPERTIES:
:CUSTOM_ID: line-length-extensions
:END:
*** STREAM-LINE-LENGTH
:PROPERTIES:
:CUSTOM_ID: stream-line-length
:END:
/Generic Function/

#+begin_src common-lisp
(stream-line-length stream) ; → (or real null)
#+end_src

Allows stream specific line length for Gray streams. Indicated by the
presence of feature =:gray-streams-line-length=. Used primarily for
the [[https://novaspec.org/cl/22_3_Formatted_Output#sec_22_3_6_2][CL:FORMAT ~<]] directive and the [[https://novaspec.org/cl/22_2_The_Lisp_Pretty_Printer#_j5][pretty printer]].

#+begin_quote
Some implementations do not permit returning =nil=. These
implementations tend to assume that the return is the default line
length which itself is implementation specific. One solution to this
is to =(call-next-method)= when a =nil= return is desired.

— Tarn W. Burton
#+end_quote
